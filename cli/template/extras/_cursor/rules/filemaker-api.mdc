---
description: |
  This rule provides guidance for working with the FileMaker Data API in this project. It should be included when:
  1. Working with database operations or data fetching
  2. Encountering database-related errors or type issues
  3. Making changes to FileMaker schemas or layouts
  4. Implementing new data access patterns
  5. Discussing alternative data storage solutions
  6. Working with server-side API routes or actions
globs: 
  - "src/server/**/*.ts"
  - "src/server/**/*.tsx"
  - "**/fmschema.config.mjs"
  - "src/**/actions/*.ts"
alwaysApply: false
---
# FileMaker Data API Integration

This rule documents how the FileMaker Data API is integrated and used in the project.

<rule>
name: filemaker_api
description: Documents FileMaker Data API integration patterns and conventions. FileMaker is the ONLY data source for this application - no SQL or other databases should be used.
filters:
  - type: file_extension
    pattern: "\\.(ts|tsx)$"
  - type: directory
    pattern: "src/server/"
  - type: content
    pattern: "(@proofgeist/fmdapi|ZodError|typegen)"

data_source_policy:
  exclusive_source: "FileMaker Data API"
  prohibited:
    - "SQL databases"
    - "NoSQL databases"
    - "Local storage for persistent data"
    - "Direct file system storage"
  reason: "All data operations must go through FileMaker to maintain data integrity and business logic"

conventions:
  api_setup:
    - Uses @proofgeist/fmdapi package version ^4.2.2
    - Configuration in fmschema.config.mjs
    - Environment variables in .env for connection details
    - Type generation via proofkit typegen command
  
  data_access:
    - ALL data operations MUST use FileMaker Data API
    - Server-side only API calls via @proofgeist/fmdapi
    - Type-safe database operations
    - Centralized error handling
    - Connection pooling and session management
    - No direct database connections outside FileMaker
  
  data_operations:
    create:
      - Use layout.create({ fieldData: {...} })
      - Validate input against Zod schemas
      - Returns recordId of created record
      - Handle duplicates via FileMaker business logic
    read:
      - Use layout.get({ recordId }) for single record by ID
      - Use layout.find({ query, limit, offset, sort }) for multiple records
      - Use layout.maybeFindFirst({ query }) for optional single record
      - Support for complex queries and sorting
    update:
      - Use layout.update({ recordId, fieldData })
      - Follow FileMaker field naming conventions
      - Respect FileMaker validation rules
    delete:
      - Use layout.delete({ recordId })
      - Respect FileMaker deletion rules
      - Handle cascading deletes via FileMaker
    query_options:
      - Limit and offset for pagination
      - Sort by multiple fields with ascend/descend
      - Complex query criteria with operators (==, *, etc.)
      - Optional type-safe responses with Zod validation

  security:
    - Credentials stored in environment variables
    - No direct client-side FM API access
    - API routes validate authentication
    - Data sanitization before queries
    - All database access through FileMaker only

type_generation:
  process:
    - Run `pnpm typegen` after any FileMaker schema changes
    - Types are generated from FileMaker database schema
    - Generated types are used in server actions and components
    - Zod schemas validate runtime data against types
  
  common_issues:
    schema_changes:
      symptoms:
        - "ZodError during runtime"
        - "Missing or renamed fields"
        - "Type mismatches in responses"
      solution: "Run `pnpm typegen && pnpm tsc`"
    
    field_types:
      symptoms:
        - "Unexpected null values"
        - "Type conversion errors"
        - "Invalid date formats"
      solution: "Update Zod schemas and type definitions"

patterns:
  - Server actions wrap FM API calls
  - Type definitions generated from FM schema
  - Error boundaries for FM API errors
  - Rate limiting on API routes
  - Caching strategies for frequent queries

dependencies:
  fmdapi: "@proofgeist/fmdapi@^4.2.2"
  proofkit: "@proofgeist/kit@^0.2.3"

keywords:
  database:
    - "FileMaker"
    - "FMREST"
    - "Database schema"
    - "Field types"
    - "Type generation"
    - "Schema changes"
    - "Exclusive data source"
    - "No SQL"
    - "FileMaker only"
    - "Data API"
  errors:
    - "ZodError"
    - "TypeError"
    - "ValidationError"
    - "Missing field"
    - "Runtime error"
  commands:
    - "typegen"
    - "tsc"
    - "type checking"
    - "schema update"
  operations:
    - "FM.create"
    - "FM.find"
    - "FM.get"
    - "FM.update"
    - "FM.delete"
    - "FileMaker layout"
    - "FileMaker query"

metadata:
  priority: high
  version: 1.0
</rule> 